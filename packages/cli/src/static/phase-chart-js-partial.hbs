<script>
  const canvasFor{{#toCamel analysisForPhase.identifierHash}}{{/toCamel}} = document.getElementById('{{analysisForPhase.identifierHash}}-chart').getContext('2d');
  const canvasFor{{#toCamel analysisForPhase.frequencyHash}}{{/toCamel}} = document.getElementById('{{analysisForPhase.frequencyHash}}-chart').getContext('2d');
  
  const optionFor{{#toCamel analysisForPhase.identifierHash}}{{/toCamel}} = {
    type: 'boxplot',
    data: {
      labels: ['{{analysisForPhase.phase}} (lower is better)'],
      datasets: [{
        label: '{{analysisForPhase.servers.[0].name}}',
        borderColor: '#0A2D46',
        backgroundColor: 'rgba(199, 241, 106, 0.50)',
        borderWidth: 1,
        outlierColor: '#0a2d46',
        itemRadius: 2,
        itemBackgroundColor: '#1884E4',
        data: [{{{stringify analysisForPhase.controlFormatedSamples}}}]
      }, {
        label: '{{analysisForPhase.servers.[1].name}}',
        borderColor: '#0A2D46',
        backgroundColor: 'rgba(56, 210, 211, 0.50)',
        borderWidth: 1,
        outlierColor: '#0a2d46',
        itemRadius: 2,
        itemBackgroundColor: '#1884E4',
        data: [{{{stringify analysisForPhase.experimentFormatedSamples}}}]
      }]
    },
    options: {
      aspectRatio: 3,
      maintainAspectRatio: false,
      devicePixelRatio: 2.5,
      responsive: true,
      legend: {
        display: true,
        position: 'top'
      },
      tooltips: {
        callbacks: {
          boxplotLabel: function(item, data, stats, hoveredOutlierIndex) {
            const datasetLabel = data.datasets[item.datasetIndex].label || '';
            let label = `${datasetLabel} ${typeof item.xLabel === 'string' ? item.xLabel : item.yLabel}`;
            if (!stats) {
              return `${label}`;
            }
            if (hoveredOutlierIndex >= 0) {
              const outlier = stats.outliers[hoveredOutlierIndex];
              const traceIndex = stats.samplesMS.indexOf(outlier);
              return `outlier: ${outlier} | trace-index: ${traceIndex}`;
            }
            return `min: ${stats.min} | q1: ${stats.q1} | median: ${stats.median} | q3: ${stats.q3} | max: ${stats.max}`;
          }
        }
      },
      scales: {
        xAxes: [{
          // Specific to Bar Controller
          categoryPercentage: 0.9,
          barPercentage: 0.8
        }],
        yAxes: [{
          ticks: {
            callback: function(value) {
              return `${value} ms`;
            }
          }
        }]
      }
    }
  }; 

  const optionFor{{#toCamel analysisForPhase.frequencyHash}}{{/toCamel}} = {
    type: 'bar',
    data: {
      labels: {{{stringify analysisForPhase.frequency.labels}}},
      datasets: [{
        label: "Control",
        backgroundColor: 'rgba(199, 241, 106, 0.50)',
        borderWidth: 1,
        borderColor: '#0A2D46',
        data: {{{stringify analysisForPhase.frequency.control}}}
      },{
        label: "Experiment",
        backgroundColor: 'rgba(56, 210, 211, 0.50)',
        borderWidth: 1,
        borderColor: '#0A2D46',
        data: {{{stringify analysisForPhase.frequency.experiment}}}
      }]
    },
    options: {
      aspectRatio: 3,
      maintainAspectRatio: false,
      devicePixelRatio: 2.5,
      legend: {
        display: true,
        position: 'top'
      },
      tooltips: {
        mode: "index",
        intersect: false
      },
      scales: {
        xAxes: [{
          stacked: true
        }],
        yAxes: [{
          stacked: true
        }]
      }
    }
  };

  window['{{analysisForPhase.phase}}'] = new Chart(canvasFor{{#toCamel analysisForPhase.identifierHash}}{{/toCamel}}, optionFor{{#toCamel analysisForPhase.identifierHash}}{{/toCamel}});
  window['{{analysisForPhase.phase}}-frequency'] = new Chart(canvasFor{{#toCamel analysisForPhase.frequencyHash}}{{/toCamel}}, optionFor{{#toCamel analysisForPhase.frequencyHash}}{{/toCamel}});
</script>