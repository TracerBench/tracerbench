#!/usr/bin/env node
'use strict';

const Profile = require('../dist/index.cjs');
const program = require('commander');
const chalk = require('chalk');
const fs = require('fs');
const SilentError = require('silent-error');
const d3 = require('d3');

function methodNames(val) {
  return val.split(',');
}

program
  .option('-f, --file <file>', 'Path to trace json file')
  .option('-l, --locations', 'include locations in names')
  .parse(process.argv);

const error = chalk.bold.red;

const { file, locations } = program;
const defaultProfilePath = `${process.cwd()}/profile.json`;

if (file === undefined && fs.existsSync(defaultProfilePath) === false) {
  throw new SilentError(error(`Error: Must pass a path to the trace file ðŸ’£`));
}

const filePath = file || defaultProfilePath;
const traceEvents = JSON.parse(fs.readFileSync(filePath, 'utf8'));
const trace = Profile.loadTrace(traceEvents);
const profile = trace.cpuProfile;

const methods = new Set();


if (locations) {
  profile.nodes.forEach(node => {
    const {
      functionName,
      url,
      lineNumber,
      columnNumber
    } = node.callFrame;

    methods.add(`${url}:${lineNumber}:${columnNumber}.${normalizeFnName(functionName)}`);
  });
} else {
  profile.nodes.forEach(node => {
    methods.add(normalizeFnName(node.callFrame.functionName))
  });
}
methods.forEach(method => console.log(method));

function normalizeFnName(name) {
  if (name === '') {
    name = '(anonymous)'
  }
  return name;
}